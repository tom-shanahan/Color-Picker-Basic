[{"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\SaturationSpectrum.js":"1","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\HueSpectrum.js":"2","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\index.js":"3","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\DefaultColor.js":"4","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\reportWebVitals.js":"5","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorUtilities.js":"6","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\ColorPicker.js":"7","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\RelatedColors.js":"8","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorEditor.js":"9"},{"size":4141,"mtime":1608757942428,"results":"10","hashOfConfig":"11"},{"size":4153,"mtime":1609182919793,"results":"12","hashOfConfig":"11"},{"size":553,"mtime":1609196099281,"results":"13","hashOfConfig":"11"},{"size":114,"mtime":1608753960562,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1607193088477,"results":"15","hashOfConfig":"11"},{"size":619,"mtime":1608760572229,"results":"16","hashOfConfig":"11"},{"size":12838,"mtime":1609198351067,"results":"17","hashOfConfig":"11"},{"size":6596,"mtime":1609182273889,"results":"18","hashOfConfig":"11"},{"size":3050,"mtime":1608854350127,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"bxnom0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\SaturationSpectrum.js",[],["42","43"],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\HueSpectrum.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\index.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\DefaultColor.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\reportWebVitals.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorUtilities.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\ColorPicker.js",["44","45","46","47","48"],"import React, { Component } from 'react';\r\nimport HueSpectrum from './Components/HueSpectrum';\r\nimport SaturationSpectrum from './Components/SaturationSpectrum';\r\nimport DEFAULT_COLOR from \"./Components/DefaultColor\";\r\nimport tinycolor from \"tinycolor2\";\r\nimport RelatedColors from './Components/RelatedColors';\r\nimport ColorEditor from \"./Components/ColorEditor\";\r\nimport { toFullColor } from './Components/ColorUtilities'\r\nimport { clone } from 'lodash';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"./App.css\";\r\nimport './CSS/title.css'\r\n\r\nclass ColorPicker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            curColor: DEFAULT_COLOR,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(color) {\r\n        if (color.r || color.g || color.b) {\r\n            var { r,g,b } = tinycolor(this.state.curColor).toRgb();\r\n            if (color.r || color.r===0) {\r\n                r = color.r\r\n            }\r\n            if (color.g || color.g===0) {\r\n                g = color.g\r\n            }\r\n            if (color.b || color.b===0) {\r\n                b = color.b\r\n            }\r\n            this.setState({\r\n                curColor: tinycolor({ r:r,g:g,b:b }).toHsv(),\r\n            });\r\n        }\r\n\r\n        else if (color.h || color.s ||color.v)  {\r\n            var { h,s,v } = tinycolor(this.state.curColor).toHsv();\r\n            if (color.h || color.h===0) {\r\n                h = color.h\r\n            }\r\n            if (color.s || color.s===0) {\r\n                s = color.s\r\n            }\r\n            if (color.v || color.v===0) {\r\n                v = color.v\r\n            }\r\n            this.setState({\r\n                curColor: tinycolor({ h:h,s:s,v:v }).toHsv(),\r\n            });\r\n        }\r\n        else if (color.hex) {\r\n            if (tinycolor(color.hex).isValid()) {\r\n                this.setState({\r\n                    curColor: tinycolor(color.hex).toHsv(),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const baseColor = toFullColor(this.state.curColor);\r\n\r\n        let complement = clone(baseColor).complement().toHexString().toUpperCase();\r\n        let analogArray = tinycolor(this.props.color).analogous();\r\n        let triadArray = tinycolor(this.props.color).triad();\r\n        let tetradArray = tinycolor(this.props.color).tetrad();\r\n\r\n        const mono = clone(baseColor).lighten(40).desaturate(40).toHexString().toUpperCase();\r\n        const triad1 = clone(baseColor).triad()[1].toHexString().toUpperCase();\r\n        const triad2 = clone(baseColor).triad()[2].toHexString().toUpperCase();\r\n\r\n        const tetrad1 = clone(baseColor).tetrad()[1].toHexString().toUpperCase();\r\n        const tetrad2 = clone(baseColor).tetrad()[2].toHexString().toUpperCase();\r\n        const tetrad3 = clone(baseColor).tetrad()[3].toHexString().toUpperCase();\r\n\r\n        const colorLabel = {\r\n            textAlign: 'center',\r\n            color: '#222',\r\n            paddingTop: '3px',\r\n            paddingBottom: '4px',\r\n            package: '4px',\r\n            textTransform: 'capitalize',\r\n        };\r\n        const colorInput = {\r\n            border: 'none',\r\n            boxShadow: 'inset 0 0 0 1px #ccc',\r\n            width:'65px',\r\n            marginRight: '8px',\r\n            marginLeft: '4px',\r\n            fontFamily: 'Roboto',\r\n            fontWeight: 700,\r\n            fontSize: 'x-large',\r\n        };\r\n\r\n        const redInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'red',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'red',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const GreenInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'green',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'green',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const BlueInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'blue',\r\n                textTransform: 'upperCase',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'blue',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const hexInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'black',\r\n                textTransform: 'upperCase',\r\n                width:'120px',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'black',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const HSVInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                textTransform: 'upperCase',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n\r\n        const shadowX = ((tinycolor(this.state.curColor).toHsv().s - .5)*20).toString()+'px';\r\n        const shadowY = ((tinycolor(this.state.curColor).toHsv().v - .5)*20).toString()+'px';\r\n\r\n        return (\r\n            <html>\r\n                <body style={{ 'background':mono }}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} className='grid-element'>\r\n                            <div className='container' style={{paddingTop:'5px', marginTop:'5px'}}>\r\n                                <h1 className=\"vectro\" style={{ background:\"black\", paddingLeft:'5px', paddingRight:'20px'\r\n                                    , borderRadius: \"10px\"  }}>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY, '--color':tetrad1 }}>I</span>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad2 }}>I</span>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad3, paddingRight:'20px' }}>I</span>\r\n                                    <span className=\"vectro-body\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':complement }}>\r\n                                        Coloration\r\n                                    </span>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad1 }}>I</span>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad2 }}>I</span>\r\n                                    <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad3 }}>I</span>\r\n                                </h1>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} className='grid-element'>\r\n                            <div className='container'>\r\n                                <div style={{ display:'flex', marginLeft:'flex'}} >\r\n                                    <div style={{ width:'300px' }}>\r\n                                        <SaturationSpectrum value={ tinycolor(this.state.curColor).toHsv() } onChange={ this.handleChange } />\r\n                                        <div className=\"colorSwatches\" style={{ background: tinycolor(this.state.curColor).toHexString(), width:'300px' }}>\r\n                                            { tinycolor(this.state.curColor).toHexString().toUpperCase() }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{ }}>\r\n                                        <HueSpectrum value={ tinycolor(this.state.curColor).toHsv() } onChange={ this.handleChange } />\r\n                                    </div>\r\n                                    <div style={{ display:'flex', padding:'5px', marginTop:'auto', marginBottom:'auto', paddingBottom:'20px' }}>\r\n                                        <div>\r\n                                            <div style={{padding: '5px'}}>\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"hex\"\r\n                                                    value={ tinycolor(this.state.curColor).toHexString() }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: hexInput.colorInput, colorLabel: hexInput.colorLabel }}\r\n                                                />\r\n                                            </div>\r\n                                            <div style={{padding: '5px'}}>\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"r\"\r\n                                                    value={ tinycolor(this.state.curColor).toRgb().r }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: redInput.colorInput, colorLabel: redInput.colorLabel }}\r\n                                                />\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"g\"\r\n                                                    value={ tinycolor(this.state.curColor).toRgb().g }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: GreenInput.colorInput, colorLabel: GreenInput.colorLabel }}\r\n                                                />\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"b\"\r\n                                                    value={ tinycolor(this.state.curColor).toRgb().b }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: BlueInput.colorInput, colorLabel: BlueInput.colorLabel }}\r\n                                                />\r\n                                            </div>\r\n                                            <div style={{padding: '5px'}}>\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"h\"\r\n                                                    value={ Math.round(tinycolor(this.state.curColor).toHsv().h) }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                                />\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"s\"\r\n                                                    value={ Math.round(tinycolor(this.state.curColor).toHsv().s*100)+\"%\" }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                                />\r\n                                                <ColorEditor\r\n                                                    colorFormat=\"v\"\r\n                                                    value={ Math.round(tinycolor(this.state.curColor).toHsv().v*100)+\"%\" }\r\n                                                    onChange={ this.handleChange }\r\n                                                    style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} className='grid-element'>\r\n                            <div className='container'>\r\n                                <div style={{ display:'flex', margin:'auto', width:'750px'}}>\r\n                                    <RelatedColors color={ this.state.curColor } />\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </body>\r\n            </html>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorPicker;\r\n","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\RelatedColors.js",["49","50"],"import React, { Component } from 'react';\r\nimport tinycolor from \"tinycolor2\";\r\nimport \"../App.css\"\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport PropTypes from \"prop-types\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nclass RelatedColors extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            displayType: \"\",\r\n        }\r\n        this.changeDisplay = this.changeDisplay.bind(this);\r\n    }\r\n\r\n    static propTypes = {\r\n        color: PropTypes.any,\r\n    }\r\n\r\n    static defaultProps = {\r\n        color: null,\r\n    }\r\n\r\n    changeDisplay(event) {\r\n        this.setState({\r\n            displayType: event.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let color0 = null;\r\n        let color1 = null;\r\n        let color2 = null;\r\n        let color3 = null;\r\n        let color4 = null;\r\n\r\n        let complementColor = tinycolor(this.props.color).complement().toHexString().toUpperCase();\r\n        let mono10 = tinycolor(this.props.color).lighten(10).toHexString().toUpperCase();\r\n        let mono20 = tinycolor(this.props.color).lighten(20).toHexString().toUpperCase();\r\n        let mono30 = tinycolor(this.props.color).lighten(30).toHexString().toUpperCase();\r\n        let analogArray = tinycolor(this.props.color).analogous();\r\n        let triadArray = tinycolor(this.props.color).triad();\r\n        let tetradArray = tinycolor(this.props.color).tetrad();\r\n\r\n        let current = tinycolor(this.props.color).toHexString().toUpperCase();\r\n        let { displayType } = this.state;\r\n        switch (displayType) {\r\n            default:\r\n                color0 = null;\r\n                color1 = null;\r\n                color2 = null;\r\n                color3 = null;\r\n                color4 = null;\r\n                break;\r\n            case 'Complementary Colors:':\r\n                color0 = current;\r\n                color1 = complementColor;\r\n                color2 = null;\r\n                color3 = null;\r\n                color4 = null;\r\n                break;\r\n            case 'Monochromatic Colors:':\r\n                color0 = current;\r\n                color1 = mono10;\r\n                color2 = mono20;\r\n                color3 = mono30;\r\n                color4 = null;\r\n                break;\r\n            case 'Analogous Colors:':\r\n                color0 = current;\r\n                color1 = analogArray[1].toHexString().toUpperCase();\r\n                color2 = analogArray[2].toHexString().toUpperCase();\r\n                color3 = analogArray[4].toHexString().toUpperCase();\r\n                color4 = analogArray[5].toHexString().toUpperCase();\r\n                break;\r\n            case 'Triadic Colors:':\r\n                color0 = current;\r\n                color1 = triadArray[1].toHexString().toUpperCase();\r\n                color2 = triadArray[2].toHexString().toUpperCase();\r\n                color3 = null;\r\n                color4 = null;\r\n                break;\r\n            case 'Tetradic Colors:':\r\n                color0 = current;\r\n                color2 = tetradArray[1].toHexString().toUpperCase();\r\n                color3 = tetradArray[2].toHexString().toUpperCase();\r\n                color4 = tetradArray[3].toHexString().toUpperCase();\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <FormControl style={{ width: '400px'}}>\r\n                        <InputLabel shrink className='scheme-selector'>\r\n                            <div className='scheme-selector' style={{fontSize:'25px'}}>Color Scheme Type:</div>\r\n                        </InputLabel>\r\n                        <div style={{marginBottom:'30px'}}/>\r\n                        <Select\r\n                            // labelId=\"demo-simple-select-placeholder-label-label\"\r\n                            // id=\"demo-simple-select-placeholder-label\"\r\n                            value={ this.state.displayType }\r\n                            onClick={ this.changeDisplay }\r\n                            displayEmpty\r\n                            // className={classes.selectEmpty}\r\n\r\n                        >\r\n                            <MenuItem value=\"\" disabled><em className='scheme-selector'>Choose a Color Scheme!</em></MenuItem>\r\n                            <MenuItem value={ 'Complementary Colors:' }><div className='scheme-selector'>Complementary Colors</div></MenuItem>\r\n                            <MenuItem value={ 'Monochromatic Colors:' }><div className='scheme-selector'>Monochromatic Colors</div></MenuItem>\r\n                            <MenuItem value={ 'Analogous Colors:' }><div className='scheme-selector'>Analogous Colors</div></MenuItem>\r\n                            <MenuItem value={ 'Triadic Colors:' }><div className='scheme-selector'>Triadic Colors</div></MenuItem>\r\n                            <MenuItem value={ 'Tetradic Colors:' }><div className='scheme-selector'>Tetradic Colors</div></MenuItem>\r\n                        </Select>\r\n                        {/*<FormHelperText>Select a Color Scheme</FormHelperText>*/}\r\n                    </FormControl>\r\n                </div>\r\n\r\n                <div>\r\n                    {/*<h4>{ displayType }</h4>*/}\r\n                    {(color0 !== null) &&\r\n                    <div className=\"colorSwatches\" style={{ background: color0 }}>\r\n                        {color0}\r\n                        </div>\r\n                    }\r\n                    {(color1 !== null) &&\r\n                    <div className=\"colorSwatches\" style={{ background: color1 }}>\r\n                        {color1}\r\n                    </div>\r\n                    }\r\n                    {(color2 !== null) &&\r\n                    <div className=\"colorSwatches\" style={{ background: color2 }}>\r\n                        {color2}\r\n                    </div>\r\n                    }\r\n                    {(color3 !== null) &&\r\n                    <div className=\"colorSwatches\" style={{ background: color3 }}>\r\n                        {color3}\r\n                    </div>\r\n                    }\r\n                    {(color4 !== null) &&\r\n                    <div className=\"colorSwatches\" style={{ background: color4 }}>\r\n                        {color4}\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RelatedColors;\r\n","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorEditor.js",["51"],"import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport reactCSS from 'reactcss';\r\nconst UP_KEY_CODE = 38\r\nconst DOWN_KEY_CODE = 40\r\n\r\nclass ColorEditor extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: String(props.value).toUpperCase(),\r\n            blurValue: String(props.value).toUpperCase(),\r\n        }\r\n        this.componentDidUpdate = this.componentDidUpdate.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.setUpdatedValue = this.setUpdatedValue.bind(this);\r\n    }\r\n\r\n    static propTypes = {\r\n        onChange: PropTypes.func,\r\n        value: PropTypes.any,\r\n        type: PropTypes.string,\r\n    }\r\n\r\n    static defaultProps = {\r\n        onChange: null,\r\n        value: null,\r\n        type: null,\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            this.props.value !== this.state.value &&\r\n            (prevProps.value !== this.props.value || prevState.value !== this.state.value)\r\n        ) {\r\n            if (this.input === document.activeElement) {\r\n                this.setState({ blurValue: String(this.props.value).toUpperCase() })\r\n            } else {\r\n                this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBlur() {\r\n        if (this.state.blurValue) {\r\n            this.setState({ value: this.state.blurValue, blurValue: null })\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setUpdatedValue(event.target.value, event)\r\n    }\r\n\r\n    // change RGB values with up/down arrows\r\n    handleKeyDown(event) {\r\n        const value = Number(String(event.target.value).replace(/%/g, ''))\r\n        if (!isNaN(value) && ([UP_KEY_CODE,DOWN_KEY_CODE].includes(event.keyCode))) {\r\n            const updatedValue = event.keyCode === UP_KEY_CODE ? value + 1 : value - 1\r\n            this.setUpdatedValue(updatedValue)\r\n        }\r\n    }\r\n\r\n    setUpdatedValue(value) {\r\n        const onChangeValue = this.props.colorFormat ? { [this.props.colorFormat]: value } : value\r\n        this.props.onChange(onChangeValue)\r\n        this.setState({ value })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='color-editor'>\r\n                <label style={ this.props.style.colorLabel  }>\r\n                    { this.props.colorFormat }:\r\n                </label>\r\n                <input\r\n                    style={ this.props.style.colorInput }\r\n                    ref={ input => this.input = input }\r\n                    value={ this.state.value }\r\n                    onKeyDown={ this.handleKeyDown }\r\n                    onChange={ this.handleChange }\r\n                    onBlur={ this.handleBlur }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorEditor;\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":69,"column":13,"nodeType":"58","messageId":"59","endLine":69,"endColumn":24},{"ruleId":"56","severity":1,"message":"60","line":70,"column":13,"nodeType":"58","messageId":"59","endLine":70,"endColumn":23},{"ruleId":"56","severity":1,"message":"61","line":71,"column":13,"nodeType":"58","messageId":"59","endLine":71,"endColumn":24},{"ruleId":"56","severity":1,"message":"62","line":74,"column":15,"nodeType":"58","messageId":"59","endLine":74,"endColumn":21},{"ruleId":"56","severity":1,"message":"63","line":75,"column":15,"nodeType":"58","messageId":"59","endLine":75,"endColumn":21},{"ruleId":"56","severity":1,"message":"64","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":22},{"ruleId":"56","severity":1,"message":"65","line":10,"column":9,"nodeType":"58","messageId":"59","endLine":10,"endColumn":19},{"ruleId":"56","severity":1,"message":"66","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":16},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'analogArray' is assigned a value but never used.","Identifier","unusedVar","'triadArray' is assigned a value but never used.","'tetradArray' is assigned a value but never used.","'triad1' is assigned a value but never used.","'triad2' is assigned a value but never used.","'FormHelperText' is defined but never used.","'Typography' is defined but never used.","'reactCSS' is defined but never used.","no-global-assign","no-unsafe-negation"]