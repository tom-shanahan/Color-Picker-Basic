[{"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\SaturationSpectrum.js":"1","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\HueSpectrum.js":"2","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\index.js":"3","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\DefaultColor.js":"4","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\reportWebVitals.js":"5","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorUtilities.js":"6","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\ColorPicker.js":"7","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\RelatedColors.js":"8","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorEditor.js":"9"},{"size":4141,"mtime":1608757942428,"results":"10","hashOfConfig":"11"},{"size":4153,"mtime":1609182919793,"results":"12","hashOfConfig":"11"},{"size":531,"mtime":1608226877585,"results":"13","hashOfConfig":"11"},{"size":114,"mtime":1608753960562,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1607193088477,"results":"15","hashOfConfig":"11"},{"size":619,"mtime":1608760572229,"results":"16","hashOfConfig":"11"},{"size":12356,"mtime":1609184892915,"results":"17","hashOfConfig":"11"},{"size":6596,"mtime":1609182273889,"results":"18","hashOfConfig":"11"},{"size":3050,"mtime":1608854350127,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bxnom0",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\SaturationSpectrum.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\HueSpectrum.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\index.js",[],["40","41"],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\DefaultColor.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\reportWebVitals.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorUtilities.js",[],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\ColorPicker.js",["42","43","44","45","46"],"import React, { Component } from 'react';\r\nimport HueSpectrum from './Components/HueSpectrum';\r\nimport SaturationSpectrum from './Components/SaturationSpectrum';\r\nimport DEFAULT_COLOR from \"./Components/DefaultColor\";\r\nimport tinycolor from \"tinycolor2\";\r\nimport RelatedColors from './Components/RelatedColors';\r\nimport ColorEditor from \"./Components/ColorEditor\";\r\nimport { toFullColor } from './Components/ColorUtilities'\r\nimport { clone } from 'lodash';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"./App.css\";\r\nimport './CSS/title.css'\r\n\r\nclass ColorPicker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            curColor: DEFAULT_COLOR,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(color) {\r\n        if (color.r || color.g || color.b) {\r\n            var { r,g,b } = tinycolor(this.state.curColor).toRgb();\r\n            if (color.r || color.r===0) {\r\n                r = color.r\r\n            }\r\n            if (color.g || color.g===0) {\r\n                g = color.g\r\n            }\r\n            if (color.b || color.b===0) {\r\n                b = color.b\r\n            }\r\n            this.setState({\r\n                curColor: tinycolor({ r:r,g:g,b:b }).toHsv(),\r\n            });\r\n        }\r\n\r\n        else if (color.h || color.s ||color.v)  {\r\n            var { h,s,v } = tinycolor(this.state.curColor).toHsv();\r\n            if (color.h || color.h===0) {\r\n                h = color.h\r\n            }\r\n            if (color.s || color.s===0) {\r\n                s = color.s\r\n            }\r\n            if (color.v || color.v===0) {\r\n                v = color.v\r\n            }\r\n            this.setState({\r\n                curColor: tinycolor({ h:h,s:s,v:v }).toHsv(),\r\n            });\r\n        }\r\n        else if (color.hex) {\r\n            if (tinycolor(color.hex).isValid()) {\r\n                this.setState({\r\n                    curColor: tinycolor(color.hex).toHsv(),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const baseColor = toFullColor(this.state.curColor);\r\n\r\n        let complement = clone(baseColor).complement().toHexString().toUpperCase();\r\n        let analogArray = tinycolor(this.props.color).analogous();\r\n        let triadArray = tinycolor(this.props.color).triad();\r\n        let tetradArray = tinycolor(this.props.color).tetrad();\r\n\r\n        const mono = clone(baseColor).lighten(40).desaturate(40).toHexString().toUpperCase();\r\n        const triad1 = clone(baseColor).triad()[1].toHexString().toUpperCase();\r\n        const triad2 = clone(baseColor).triad()[2].toHexString().toUpperCase();\r\n\r\n        const tetrad1 = clone(baseColor).tetrad()[1].toHexString().toUpperCase();\r\n        const tetrad2 = clone(baseColor).tetrad()[2].toHexString().toUpperCase();\r\n        const tetrad3 = clone(baseColor).tetrad()[3].toHexString().toUpperCase();\r\n\r\n        const colorLabel = {\r\n            textAlign: 'center',\r\n            color: '#222',\r\n            paddingTop: '3px',\r\n            paddingBottom: '4px',\r\n            package: '4px',\r\n            textTransform: 'capitalize',\r\n        };\r\n        const colorInput = {\r\n            border: 'none',\r\n            boxShadow: 'inset 0 0 0 1px #ccc',\r\n            width:'65px',\r\n            marginRight: '8px',\r\n            marginLeft: '4px',\r\n            fontFamily: 'Roboto',\r\n            fontWeight: 700,\r\n            fontSize: 'x-large',\r\n        };\r\n\r\n        const redInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'red',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'red',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const GreenInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'green',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'green',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const BlueInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'blue',\r\n                textTransform: 'upperCase',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'blue',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const hexInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                color:'black',\r\n                textTransform: 'upperCase',\r\n                width:'120px',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                color:'black',\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n        const HSVInput = {\r\n            colorInput:{\r\n                ...colorInput,\r\n                textTransform: 'upperCase',\r\n            },\r\n            colorLabel:{\r\n                ...colorLabel,\r\n                textTransform: 'upperCase',\r\n            }\r\n        }\r\n\r\n        const shadowX = ((tinycolor(this.state.curColor).toHsv().s - .5)*20).toString()+'px';\r\n        const shadowY = ((tinycolor(this.state.curColor).toHsv().v - .5)*20).toString()+'px';\r\n\r\n        return (\r\n            <div style={{ 'background':mono }}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <div className='container' style={{paddingTop:'5px', marginTop:'5px'}}>\r\n                            <h1 className=\"vectro\" style={{ background:\"black\", paddingLeft:'5px', paddingRight:'20px'\r\n                                , borderRadius: \"10px\"  }}>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY, '--color':tetrad1 }}>I</span>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad2 }}>I</span>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad3, paddingRight:'20px' }}>I</span>\r\n                                <span className=\"vectro-body\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':complement }}>\r\n                                    Coloration\r\n                                </span>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad1 }}>I</span>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad2 }}>I</span>\r\n                                <span className=\"vectro-bar\" style={{ '--xPos':shadowX, '--yPos':shadowY,'--color':tetrad3 }}>I</span>\r\n                            </h1>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div className='container'>\r\n                            <div style={{ display:'flex', marginLeft:'flex'}} >\r\n                                <div style={{ width:'300px' }}>\r\n                                    <SaturationSpectrum value={ tinycolor(this.state.curColor).toHsv() } onChange={ this.handleChange } />\r\n                                    <div className=\"colorSwatches\" style={{ background: tinycolor(this.state.curColor).toHexString(), width:'300px' }}>\r\n                                        { tinycolor(this.state.curColor).toHexString().toUpperCase() }\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{ }}>\r\n                                    <HueSpectrum value={ tinycolor(this.state.curColor).toHsv() } onChange={ this.handleChange } />\r\n                                </div>\r\n                                <div style={{ display:'flex', padding:'5px', marginTop:'auto', marginBottom:'auto', paddingBottom:'20px' }}>\r\n                                    <div>\r\n                                        <div style={{padding: '5px'}}>\r\n                                            <ColorEditor\r\n                                                colorFormat=\"hex\"\r\n                                                value={ tinycolor(this.state.curColor).toHexString() }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: hexInput.colorInput, colorLabel: hexInput.colorLabel }}\r\n                                            />\r\n                                        </div>\r\n                                        <div style={{padding: '5px'}}>\r\n                                            <ColorEditor\r\n                                                colorFormat=\"r\"\r\n                                                value={ tinycolor(this.state.curColor).toRgb().r }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: redInput.colorInput, colorLabel: redInput.colorLabel }}\r\n                                            />\r\n                                            <ColorEditor\r\n                                                colorFormat=\"g\"\r\n                                                value={ tinycolor(this.state.curColor).toRgb().g }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: GreenInput.colorInput, colorLabel: GreenInput.colorLabel }}\r\n                                            />\r\n                                            <ColorEditor\r\n                                                colorFormat=\"b\"\r\n                                                value={ tinycolor(this.state.curColor).toRgb().b }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: BlueInput.colorInput, colorLabel: BlueInput.colorLabel }}\r\n                                            />\r\n                                        </div>\r\n                                        <div style={{padding: '5px'}}>\r\n                                            <ColorEditor\r\n                                                colorFormat=\"h\"\r\n                                                value={ Math.round(tinycolor(this.state.curColor).toHsv().h) }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                            />\r\n                                            <ColorEditor\r\n                                                colorFormat=\"s\"\r\n                                                value={ Math.round(tinycolor(this.state.curColor).toHsv().s*100)+\"%\" }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                            />\r\n                                            <ColorEditor\r\n                                                colorFormat=\"v\"\r\n                                                value={ Math.round(tinycolor(this.state.curColor).toHsv().v*100)+\"%\" }\r\n                                                onChange={ this.handleChange }\r\n                                                style={{ colorInput: HSVInput.colorInput, colorLabel: HSVInput.colorLabel }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div className='container'>\r\n                            <div style={{ display:'flex', margin:'auto', width:'750px'}}>\r\n                                <RelatedColors color={ this.state.curColor } />\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorPicker;\r\n","C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\RelatedColors.js",["47","48"],"C:\\Users\\tshan\\WebstormProjects\\color-picker-basic\\src\\Components\\ColorEditor.js",["49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":69,"column":13,"nodeType":"56","messageId":"57","endLine":69,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":70,"column":13,"nodeType":"56","messageId":"57","endLine":70,"endColumn":23},{"ruleId":"54","severity":1,"message":"59","line":71,"column":13,"nodeType":"56","messageId":"57","endLine":71,"endColumn":24},{"ruleId":"54","severity":1,"message":"60","line":74,"column":15,"nodeType":"56","messageId":"57","endLine":74,"endColumn":21},{"ruleId":"54","severity":1,"message":"61","line":75,"column":15,"nodeType":"56","messageId":"57","endLine":75,"endColumn":21},{"ruleId":"54","severity":1,"message":"62","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":22},{"ruleId":"54","severity":1,"message":"63","line":10,"column":9,"nodeType":"56","messageId":"57","endLine":10,"endColumn":19},{"ruleId":"54","severity":1,"message":"64","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":16},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'analogArray' is assigned a value but never used.","Identifier","unusedVar","'triadArray' is assigned a value but never used.","'tetradArray' is assigned a value but never used.","'triad1' is assigned a value but never used.","'triad2' is assigned a value but never used.","'FormHelperText' is defined but never used.","'Typography' is defined but never used.","'reactCSS' is defined but never used.","no-global-assign","no-unsafe-negation"]